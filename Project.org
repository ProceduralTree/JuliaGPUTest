#+title: Project Thesis
#+startup: latexpreview t
#+latex_class: mimosis
#+BIBLIOGRAPHY: ~/org/resources/bibliography/refs.bib
#+PROPERTY: header-args:julia  :eval never-export :noweb no-export :session *julia* :async t :exports results
#+latex_compiler: lualatex
#+LATEX_HEADER: \usepackage[hyperref,x11names]{xcolor}
# #+latex_header: \include{~/.config/doom/OrgConfig/noteHeader.tex}
#+latex_header: \usepackage[
#+latex_header: colorlinks = true,
#+latex_header: citecolor  = RoyalBlue,
#+latex_header: linkcolor  = RoyalBlue,
#+latex_header: urlcolor   = RoyalBlue,
#+latex_header: unicode
#+latex_header: ]{hyperref}
#+latex_header:\usepackage{fontspec}
#+latex_header:\usepackage{ltablex}
#+latex_header: \usepackage{unicode-math}
#+latex_header: \setmonofont{DejaVu Sans Mono}[Scale=0.8]
#+latex_header: \newenvironment{abstract} {}{}
#+latex_header: \usepackage{abstract}
#+latex_header: \DeclareMathOperator*{\arg}{arg\,max}
#+latex_header:
#+latex_header:
#+latex_header:
#+cite_export: biblatex
#+options:  toc:1
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>

#+begin_abstract
This work shows sensitivity of boundary conditions for two different finite difference approaches to solving the Cahn-Hilliard equation
#+end_abstract

* Introduction
This project thesis builds upon the work in our bachelor thesis, by introducing a simple boundary condition approach to a variation of the solver used therein. In Chapter [[Fundamentals]] we introduce the Cahn-Hilliard equation in the formulation that we use for this project. This project used a two-dimensional second order version of this CH equation rather than the usual 1D 4th order one, to simplify the numerical implementation. The solver itself builds upon a finite difference discretization of this equation. In Chapter [[Numerical Solver]], together with the discrete domains, on which we run our numerical solver, we introduce a Jacoby iteration to solve the linear system derived from the aforementioned discretization.  The numerical solver in this thesis is GPU accelerated, and the discretization we chose to base our solver on is capable to calculate on all domains as long as a characteristic function is given. Therefore, we introduce two domains, on which we present our findings. The primary goal of this work is then the boundary condition approach in Chapter [[Boundary adaptation]]. Conceptionally the boundary condition we introduce simply consists of a constant value added in the linear system to all equations corresponding to grid-cells on the boundary. The actual implementation is capable of doing this for arbitrary domains. We present the results of this method on two Domains, a square one in [[Numerical evaluation]] and a circular domain in [[Numerical evaluation on a circle]] where we show the phase field for different boundary conditions which manifest in a variable contact angle of the interface on the boundary mimicking the behavior of hydrophobic/hydrophilic material. While we are unable to provide explicit formulae in relation to the constant, in Chapter [[angle]] we provide numerical insight in this relationship, and a table with precomputed values.
* Fundamentals
The Cahn-Hilliard (CH) equation is a diffuse interface coupling equation used for interpolating between different approach in different formulas. We use it in the following form:
\begin{equation}
\begin{aligned}
\partial_{t}\phi(x,t) &=  \nabla \cdot(M(\phi)\nabla\mu) \\
\mu &= - \varepsilon^2 \Delta\phi  + W'(\phi)
\end{aligned}
\end{equation}
Furthermore, our solver implements the ansatz proposed by the authors [cite:@SHIN20117441].
#+name: eq:ansatz
\begin{equation}
\begin{aligned}
\frac{\phi_{ij}^{n+1} - \phi_{ij}^n}{\Delta t}  &=  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2}} )  \\
 \mu_{ij}^{n+\frac{1}{2}} &= 2\phi_{ij}^{n+1} - \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1} ) + W'(\phi_{ij}^n) - 2\phi _{ij}^n
\end{aligned}
\end{equation}
This approach provides a semi implicit time discretization were linear terms are evaluated implicitly and the nonlinear double well potential is evaluated explicitly.

#+begin_src julia :results file :tangle src/domain.jl :file images/domain.png
using Plots
using LaTeXStrings
pgfplotsx()
Idx = CartesianIndex(1,1)
M = zeros(66,66)
M[2:end-1 , 2:end-1] = ones(64,64)
heatmap(M, title=L"\Omega_d" , clim=(0,1),
            gridlinewidth=2 , axis_equal_image=true , extra_kwargs=:subplot , xlims=(1 ,66) , ylims=(1,66), xlabel=L"x_1",ylabel=L"x_2")
#+end_src

#+RESULTS:
[[file:images/domain.png]]

#+begin_src julia :session *julia* :async t :exports none
pwd()
#+end_src

#+RESULTS:
: /home/proceduraltree/Projects/JuliaGPUTest

** Notation
This project uses a discrete, rectangular grid, which is required to fit the domain we solve for. The solver we use are two-dimensional, and therefore our grid is as well.
\begin{align}
\label{eq:4}
\vec{x}_{ij} &:= \frac{i}{h} * e_{1} + \frac{j}{h} e_2
\end{align}
We then write the discrete fields
\begin{align}
\label{eq:5}
\phi_{ij}^n &: \Omega_d \times \left\{ 0, \dots  \right\} \to \mathbb{R} \,,\\
\phi_{ij} &:= \phi(\vec{x}_{ij}) & \vec{x}_{ij} \in \Omega_{d} \\
\mu_{ij}^n &: \Omega_d \times \left\{ 0, \dots \right\} \to \mathbb{R} \,, \\
\mu_{ij} &:= \mu(\vec{x}_{ij})
\end{align}
We use the following differential quotients:
\begin{align}
D_xf_{i+\frac{1}{2} j} &= \frac{f_{i+1j} - f_{ij}}{h} & D_yf_{ij+\frac{1}{2}} &= \frac{f_{ij+1} - f_{ij}}{h}
\end{align}
And define a discrete gradient as.
\begin{equation}
\nabla_d f_{ij} = (D_x f_{i+1j} , \ D_y f_{ij+1})
\end{equation}
See [cite:@Ulmer_CHRelaxed_2024]
* Boundary adaptation
The solver we use as reference guaranties no flux boundary conditions at a discrete level by setting \( \nabla \phi_{ij} = 0\) for \( \phi_{ij} \in \partial \Omega_{d} \) this is done by multiplying with the Characteristic function of \( \Omega_{d} \)
\begin{equation}
G_{ij}=
\begin{cases}
1 \,, x_{ij} \in \Omega \\
0 \,, x_{ij} \not\in \Omega \\
\end{cases}
\end{equation}
To accommodate different boundary conditions, we bias \( \nabla_d \cdot (G_{ij} \nabla_d \phi_{ij}) \) in grid points next to the boundary. We determine those points using a centered difference scheme on \( G \)
\begin{equation}
B_{ij} = \max\left(  |G_{i+\frac{1}{2}j} - G_{i-\frac{1}{2}j}| , |G_{ij+\frac{1}{2}} - G_{ij-\frac{1}{2}}|\right) * C
\end{equation}
Where \( C \) is a constant we chose freely. For example on a 32x32 Domain with \( C=1 \) the Boundary field \( \mathbf{B} \) appears as follows


#+name: fig:boundary-square
#+begin_src julia :results file :file images/boundary.png
using Plots
using LaTeXStrings
using KernelAbstractions
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    Id = oneunit(I)
    if I in 2*(Ids[begin]+Id):2*(Ids[end]-Id)
        return 1
    end
    return 0
    end
include("src/boundary-conditions.jl")
pgfplotsx()
arr = zeros(64,64)
b = border(get_backend(arr) , 128 , size(arr))
b(arr)

heatmap(arr, title=L"\partial\Omega_d" , clim=(0,1),
            gridlinewidth=2 , axis_equal_image=true , extra_kwargs=:subplot , xlims=(1 ,64) , ylims=(1,64), xlabel=L"x_1" , ylabel=L"x_2")
#+end_src


#+caption: visualization of all grid-cells adjacent to the boundary \(\partial \Omega_{d}\) of a square domain
#+RESULTS: fig:boundary-square
[[file:images/boundary.png]]

#+name: fig:boundary-circle
#+begin_src julia :results file :file images/boundary-circle.png
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    @inline r  = Ids[end] - I
    m = maximum(Tuple(Ids[end]))
    if norm(Tuple(r)) < 0.8 * m
        return 1.
        end
    return 0.
end
using Plots
using LaTeXStrings
using KernelAbstractions
include("src/boundary-conditions.jl")
pgfplotsx()
arr = zeros(64,64)
b = border(get_backend(arr) , 128 , size(arr))
b(arr)

heatmap(arr, title=L"\partial\Omega_d" , clim=(0,1),
            gridlinewidth=2 , axis_equal_image=true , extra_kwargs=:subplot , xlims=(1 ,64) , ylims=(1,64), xlabel=L"x_1" , ylabel=L"x_2")
#+end_src

#+caption: visualization of all grid-cells adjacent to the boundary \(\partial \Omega_{d}\) of a circular domain
#+RESULTS: fig:boundary-circle
[[file:images/boundary-circle.png]]



We then state the adapted approach as:
\begin{equation}
\label{eq:second-order-adapted-ansatz}
\begin{aligned}
\frac{\phi_{ij}^{n+1} - \phi_{ij}n}{\Delta t}  &=  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2}} )  \\
 \mu_{ij}^{n+\frac{1}{2}} &= 2\phi_{ij}^{n+1} - \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1} ) + B_{ij} + W'(\phi_{ij}^n) - 2\phi _{ij}^n
\end{aligned}
\end{equation}

* Numerical solver
Contrary to the solver proposed in[cite:@Ulmer_CHRelaxed_2024] we do not use a multi-grid Gauss-Seidel Solver to solve the linear system, and use a Jacoby solver instead, since it is easier to paralyze.
Similar to [cite:@Ulmer_CHRelaxed_2024] we linearize \eqref{eq:second-order-adapted-ansatz} to
\begin{equation}
\begin{aligned}
\frac{\phi_{ij}^{n+1}}{\Delta t}  -  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2}} ) &= \frac{ \phi_{ij}^n}{\Delta t}  \\
 \mu_{ij}^{n+\frac{1}{2}} - 2\phi_{ij}^{n+1} + \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1} ) + B_{ij} &=2\phi _{ij}^n - W'(\phi_{ij}^n)
\end{aligned}
\end{equation}
After some rearranging we note, that the left-hand side is linear and, the right-hand side is solely dependent on the previous time step. Therefore, this constitutes a linear system, which we solve with a Jacoby method, the element wise formula of which is given as follows:
Provided the \( mth \) Jacoby iteration has been computed, the \( m+1th \) iteration is computed by solving
\begin{equation}
\begin{aligned}
\frac{\phi_{ij}^{n+1,m+1}}{\Delta t}  -  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2},m+\frac{1}{2}} ) &= \frac{ \phi_{ij}^{n}}{\Delta t}  \\
 \mu_{ij}^{n+\frac{1}{2},m} - 2\phi_{ij}^{n+1,m} + \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1,m+\frac{1}{2}} ) + B_{ij} &=2\phi _{ij}^n - W'(\phi_{ij}^n)
\end{aligned}
\end{equation}
For \( \phi_{ij}^{n+1,m+1} , \mu_{ij}^{n+\frac{1}{2},m+1} \),
where \( \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2},m+\frac{1}{2}} ) \) and \( \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1,m+\frac{1}{2}} ) \).  Use the results from the previous jacoby step for values off the center. eg.
\begin{equation}
\begin{aligned}
 \nabla _d \cdot (G_{ij} \nabla_d \phi_{ij}^{n+1,m+\frac{1}{2}} )  =&
\frac{1}{h^2} (
G_{i+\frac{1}{2}j}\phi_{i+1j}^{n+1,m}
+ G_{i-\frac{1}{2}j}\phi_{i-1j}^{n+1,m} \\
& + \quad G_{ij+\frac{1}{2}}\phi_{ij+1}^{n+1,m}
+ G_{ij-\frac{1}{2}}\phi_{ij-1}^{n+1,m}
 ) \\
& -
\left(
 G_{i+\frac{1}{2}j}
 + G_{i-\frac{1}{2}j}
 + G_{ij+\frac{1}{2}}
 + G_{ij-\frac{1}{2}}
\right)\phi_{ij}^{n+1,m+1}
\end{aligned}
\end{equation}
Our implementation makes use of the julia programming language, to dispatch the solution for each element in paralell on the GPU. The full implementation of the jacoby iteration is given as:
#+begin_src julia :eval never :exports code
@kernel function jacoby!(
    Φ,
    M,
    @Const(Ξ),
    @Const(Ψ),
    @Const(h),
    @Const(ε),
    @Const(Δt),
    @Const(iterations)
)
    I   = @index(Global, Cartesian)
    Id  = oneunit(I)
    Ids = CartesianIndices(M)
    Ix = CartesianIndex(1, 0)
    Iy = CartesianIndex(0, 1)
    if I in (Ids[begin]+Id:Ids[end]-Id)
        g = G(2 * I + Ix, Ids) + G(2 * I + Iy, Ids) + G(2 * I - Ix, Ids) + G(2 * I - Iy, Ids)
        a1 = 1/Δt
        a2 = -1* ε^2/h^2 * g  - 2
        b1 = 1/h^2 * g
        b2 = 1
        for _ = 1:iterations

            Σμ = G(2 * I + Ix, Ids) * M[I+Ix] + G(2 * I + Iy, Ids) * M[I+Iy] + G(2 * I - Ix, Ids) * M[I-Ix] + G(2 * I - Iy, Ids) * M[I-Iy]

            Σϕ = G(2 * I + Ix, Ids) * Φ[I+Ix] + G(2 * I + Iy, Ids) * Φ[I+Iy] +G(2 * I - Ix, Ids) * Φ[I-Ix] +G(2 * I - Iy, Ids) * Φ[I-Iy]

            c1 = Ξ[I] + 1/h^2   * Σμ
            c2 = Ψ[I] - ε^2/h^2 * Σϕ

            # stupid matrix solve
            @inline Φ[I] = (c1*b2 - c2*b1) / (a1*b2 - a2*b1)
            @inline M[I] = (a1*c2 - a2*c1) / (a1*b2 - a2*b1)
            #
            @synchronize()
        end

    end
end
#+end_src


* Numerical evaluation
We set constant values for B_ij on the boundary to begin with our evaluations.
One may note that C = 0 is equivalent to the no-flux condition of the original solver introduced in the Bachelor thesis. Now, as a preliminary verification step we set C = 0 as our first choice.
Consequently, for \( C = 0 \), the interface lies orthogonal on the boundary (see Fig. [[fig:angle0]]), which we expect for a CH solver with no-flux boundary conditions.
For \( B_{ij} \in \{-1,1\} \) we observed behavior connected to hydrophobic / hydrophilic substances on the boundary, where \( B_{ij}=1 \) resulted in the one phase pearling off the boundary, while the other seemed attracted. These certainly leads to the apparent contact angles of 180° and 0° respectively. Using \( B_{ij} = -1 \) results in the opposite behavior.


#+name: fig:angle0
#+begin_src julia  :exports results :results file :file images/baseline.png
using LaTeXStrings
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    Id = oneunit(I)
    if I in 2*(Ids[begin]+Id):2*(Ids[end]-Id)
        return 1
    end
    return 0
    end

h::Float32 = 3f-4
Δt::Float32 = 1e-4
ε::Float32 = 2e-4
W′(x) = -x * (1 - x^2)

include("src/solvers.jl")
include("src/initial_conditions.jl")
arr = _init()
θ = 0
n = 100
solution = solve(arr , n , θ=θ)
gr()
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
title!(L"$\Phi$  after $%$n$ time-steps")
xlabel!(L"i")
ylabel!(L"j")
#+end_src

#+caption: phase-field \( \phi \) after 100 time-steps with \( C=0 \) emmulating no-flux boundary.
#+RESULTS: fig:angle0
[[file:images/baseline.png]]

We show, that our solver is stable for values \(C \neq 0\). In [[fig:angle1]] we employ a constant value of \(C=1\) and observe the phase corresponding to \(\phi = 1\) puling away from the boundary. The contact angle between phase 1 and the boundary approaches 180° i.e. the interface runs parallel to the boundary.
#+name: fig:angle1
#+begin_src julia  :results file :file images/angle1.png
θ = 1f0
n = 100
solution = solve(arr , n , θ=θ)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
title!(L"$\Phi$  after $%$n$ time-steps")
xlabel!(L"i")
ylabel!(L"j")
#+end_src

#+caption: phase-field   \(\phi\) after 100 time steps with \(C=1\)
#+RESULTS: fig:angle1
[[file:images/angle1.png]]


In [[fig:angle-1]] we try the reverse situation. And we observe corresponding behavior. When using a value of \(C=-1\) we observe opposite behavior relative to the case in Fig. [[fig:angle1]]. Where the contact angle on the boundary lies at 0°, the interface runs parallel to the boundary again.
#+name: fig:angle-1
#+begin_src julia :results file :file images/angle-.png
include("src/solvers.jl")
θ = -1f-0
arr = _init()
n = 500
solution = solve(arr , n , θ=θ ,arrtype=cu)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
title!(L"$\Phi$  after $%$n$ time-steps")
xlabel!(L"i")
ylabel!(L"j")
#+end_src

#+caption: phase-field \( \phi \) after 100 time-steps with \( C=-1 \)
#+RESULTS: fig:angle-1
[[file:images/angle-.png]]

The most interesting behavior are noted for values between \((-1,1)\), where we observe the contact angle of the interface at the boundary changes from parallel 0° to parallel 180°.
#+name: fig:angle-multiple
#+begin_src julia :results file :file images/angle-sqrt(2).png
include("src/solvers.jl")
angles = Float32.([-1+sqrt(2)/2, -0.5 , 0.5 , 1-sqrt(2)/2])
arr = _init()
n = 100
plots = []
for a in angles
    solution = solve(arr , n , θ=a)
    h = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
    title!(h,L" C=%$a")
    xlabel!(h,L"i")
    ylabel!(h,L"j")
    push!(plots, h)
end
plot(plots...)
#+end_src

#+caption: phase-field \( \phi \) after 500 time-steps with \(C \in \{-1 + \frac{\sqrt{2}}{2} , -0.5 , 0.5 , 1 - \frac{\sqrt{2}}{2} \}\)


#+name: fig:random-square
#+begin_src julia    :exports both
include("src/solvers.jl")
θ = -5f-1
n = 100
arr = _init()
d = domain(get_backend(arr) , 256 , size(arr))
d(arr)
h = 25e-5
solution = solve(arr , n , θ=θ)
h1 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"h=%$h")
h = 20e-5
solution = solve(arr , n , θ=θ)
h2 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"h=%$h")
h = 15e-5
solution = solve(arr , n , θ=θ)
h3 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"h=%$h")
h = 10e-5
solution = solve(arr , n , θ=θ)
h4 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"h=%$h")
plot(h1,h2,h3,h4)
#+end_src

#+RESULTS: fig:random-square
[[file:/tmp/babel-frcHT2/julia-LrFbWa.png]]

#+caption: phase-field \( \phi \) after 100 time-steps with \( C=-\frac{\sqrt{2}}{2} \)

#+begin_src julia
include("src/solvers.jl")
θ = -5f-1
n = 100
arr = _init()
d = domain(get_backend(arr) , 256 , size(arr))
d(arr)
anim = @animate for i=0e-5:1e-6:40e-5
    solution = solve(arr , n , θ=θ , h=i)
    heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"h=%$i")
    end
mp4(anim , "animations/h.mp4" , fps=24)
#+end_src

#+RESULTS:
: Plots.AnimatedGif("/home/proceduraltree/Projects/JuliaGPUTest/animations/h.mp4")

#+begin_src julia
include("src/solvers.jl")
θ = -5f-1
n = 100
arr = _init()
d = domain(get_backend(arr) , 256 , size(arr))
d(arr)
anim = @animate for i=0e-5:1e-6:40e-5
    solution = solve(arr , n , θ=θ, ε=i)
    heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"\varepsilon=%$i")
    end
mp4(anim , "animations/epsilon.mp4" , fps=24)
#+end_src

#+RESULTS:
: Plots.AnimatedGif("/home/proceduraltree/Projects/JuliaGPUTest/animations/epsilon.mp4")

* Numerical evaluation on a circle
The original solver presented in [cite:@SHIN20117441] was able to solve the CH equation on arbitrary domains. Since the addition of our boundary function depends solely on the characteristic function of the discrete domain, we are able to use our approach on different Domains, by providing a different characteristic function. We present the results of which in this chapter.
To show the behavior of the CH solver in [[fig:angle0c]], we first employ no-flux boundary conditions on a circular domain. We observe the interface perpendicular on the boundary, as we expect.

#+begin_src julia
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    @inline r  = Ids[end] - I
    m = maximum(Tuple(Ids[end]))
    if norm(Tuple(r)) < 0.8 * m
        return 1.
        end
    return 0.
end

h::Float32 = 3f-4
Δt::Float32 = 1e-4
ε::Float32 = 2e-4
W′(x) = -x * (1 - x^2)
#+end_src

#+RESULTS:
: W′ (generic function with 1 method)


#+name: fig:angle0c
#+begin_src julia  :exports results :results file :file images/angle0c.png
include("src/solvers.jl")
include("src/initial_conditions.jl")
arr = _init()
d = domain(get_backend(arr) , 128 , size(arr))
θ = 0
solution = solve(arr , 100 , θ=θ)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
#+end_src

#+caption: \(\phi\) after 100 time steps on a circular domain with no-flux boundary-conditions after 100 time steps on a circular domain with no-flux
#+RESULTS: fig:angle0c
[[file:images/angle0c.png]]



The results we observe in [[fig:angle1c]] are similar to the results on a square domain in [[fig:angle1]]. The contact angle is 180° i.e. the interface does not touch the boundary and runs parallel to it.
#+name: fig:angle1c
#+begin_src julia  :exports results :results file :file images/anfle1c.png
θ = 1f0
solution = solve(arr , 100 , θ=θ)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
#+end_src

#+caption: phase-field \( \phi \) after 100 time-steps with \( C=1 \)
#+RESULTS: fig:angle1c
[[file:images/anfle1c.png]]

The results for \(C=-1\) in [[fig:angle-1c]] on the circular domain, are similar to the results in [[fig:angle-1]] on the square domain as well, where the interface touches the boundary and runs parallel with a contact angle of 0°.
#+name: fig:angle-1c
#+begin_src julia   :results file :file images/angle-1c.png
include("src/solvers.jl")
θ = -1f-0
arr = _init()
solution = solve(arr , 100 , θ=θ ,arrtype=cu)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
#+end_src

#+caption: phase-field \( \phi \) after 100 time-steps with \( C=-1 \)
#+RESULTS: fig:angle-1c
[[file:images/angle-1c.png]]

When evaluating intermediate contact angles in [[fig:angle-multiplec]], the results are similar to the square domain again, however, especially for shallow angles, we observe some artifacts of one phase appearing in places where previously was none. We observe similar behavior on square domains only in the corners, i.e. points where the boundary has high curvature.
#+name: fig:angle-multiplec
#+begin_src julia   :exports results :results file :file images/angle-multiplec.png
include("src/solvers.jl")
angles = Float32.([-1+sqrt(2)/2, -0.5 , 0.5 , 1-sqrt(2)/2])
arr = _init()
n = 100
plots = []
for a in angles
    solution = solve(arr , n , θ=a)
    h = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
    title!(h,L" C=%$a")
    xlabel!(h,L"i")
    ylabel!(h,L"j")
    push!(plots, h)
end
plot(plots...)
#+end_src

#+caption: phase-field \( \phi \) after 500 time-steps with \(C \in \{-1 + \frac{\sqrt{2}}{2} , -0.5 , 0.5 , 1 - \frac{\sqrt{2}}{2} \}\) on a circular domain.
#+RESULTS: fig:angle-multiplec
[[file:images/angle-multiplec.png]]



When using random initial phase-fields, the results look the comparable to the square domain, and exhibit the for the CH equation expected behavior, whereas time goes on, the many small parts coallesce into larger parts.
#+name: fig:random-circle
#+begin_src julia   :results file :file images/random-circle.png :exports none
using LaTeXStrings
include("src/solvers.jl")
θ = 5f-3
arr = cu(rand(Float32,256,256)) .* 2 .- 1
d = domain(get_backend(arr) , 256 , size(arr))
d(arr)
solution = solve(arr , 5 , θ=θ)
h1 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=5")
solution = solve(arr , 50 , θ=θ)
h2 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=50")
solution = solve(arr , 500 , θ=θ)
h3 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=500")
solution = solve(arr , 5000 , θ=θ)
h4 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=5000")
plot(h1,h2,h3,h4)
#+end_src

#+caption: random initial data after increasing  numer of time-steps.
#+RESULTS: fig:random-circle
[[file:images/random-circle.png]]



* Relaxed :noexport:
#+begin_src julia
using Plots
using LaTeXStrings
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    Id = oneunit(I)
    if I in 2*(Ids[begin]+Id):2*(Ids[end]-Id)
        return 1
    end
    return 0
    end

h::Float32 = 3f-4
Δt::Float32 = 1e-4
ε::Float32 = 5e-4
W′(x) = -x * (1 - x^2)

include("src/relaxed_solver.jl")
include("src/initial_conditions.jl")
arr = _init()
θ = 0
n = 100
solution = solve(arr , n)
gr()
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
title!(L"$\Phi$  after $%$n$ time-steps")
xlabel!(L"i")
ylabel!(L"j")
#+end_src

#+RESULTS:
[[file:/tmp/babel-vWVcH5/julia-9IokNN.png]]

* Energy and mass behavior :noexport:
The Cahn-Hilliard equation was originally derived from a Ginzburg-Landau Energy [cite:@Wu_2022]. This energy gives a measure of total curvature, and is proven to decrease in time for no-flux boundary condition for no-flux boundary conditions. The energy is given as
\begin{equation}
\label{eq:ginzburg-landau}
E^{\text{bulk}}[\phi] = \int_{\Omega} \frac{\varepsilon^2}{2} |\nabla \phi |^2 + W(\phi) \, dx ,
\end{equation}
#+begin_src julia
h::Float32 = 3f-4
Δt::Float32 = 1e-4
ε::Float32 = 2e-4
W′(x) = -x * (1 - x^2)
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    @inline r  = Ids[end] - I
    m = maximum(Tuple(Ids[end]))
    if norm(Tuple(r)) < 0.8 * m
        return 1.
        end
    return 0.
end
n = 100
include("src/solvers.jl")
include("src/initial_conditions.jl")
include("src/util.jl")
arr = _init()
s,f = solve_and_evaluate(arr , n, bulk_energy ,  θ=0.0f0)
plot(f[50:end] , yaxis=:log)
#+end_src

#+RESULTS:
[[file:/tmp/babel-frcHT2/julia-VNDrnf.png]]

* Different step sizes and \varepsilon :noexport:

#+begin_src julia   :results file :file images/random-circle.png :exports none
using LaTeXStrings
include("src/solvers.jl")
θ = 5f-3
arr = cu(rand(Float32,256,256)) .* 2 .- 1
d = domain(get_backend(arr) , 256 , size(arr))
d(arr)
solution = solve(arr , 5 , θ=θ)
h1 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=5")
solution = solve(arr , 50 , θ=θ)
h2 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=50")
solution = solve(arr , 500 , θ=θ)
h3 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=500")
solution = solve(arr , 5000 , θ=θ)
h4 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=5000")
plot(h1,h2,h3,h4)
#+end_src
* angle
In previous experiments we noted that the angle of the interface changes with different input parameters. While we do not have a mathematical derivation of this relation, we aim to provide numerical insight in this chapter. We calculate this angle using the gradient of the phase-field \(\nabla \phi_{ij}\) and the normal of our domains' boundary.
\begin{align}
\label{eq:1}
\frac{\nabla_d \phi_{ij} \cdot \mathbf{n}_{ij}}{\|\nabla_{d} \phi_{ij}\|} &= \cos(\theta)& & \phi_{ij} \in \partial\Omega_{d}
\end{align}
The normal the circular domain in our second example is
\begin{equation}
\label{eq:3}
\mathbf{n}_{ij} := \mathbf{n}(\vec{x}_{ij}) = \frac{\vec{c} - \vec{x}_{ij}}{\| \vec{c} - \vec{x}_{ij}\|}
\end{equation}
Where \(\vec{c}\) is the center of the domain.
For a single point \(\vec{x}_{ij}\) on the interface and near the boundary. Since we need a finite difference to evaluate \ref{eq:1}, we do not select a point directly on the boundary and since we need a point on the interface, where \(\nabla \phi_{ij}\) is large, we calculate the angle at
\begin{equation}
\label{eq:2}
P_{ij} = arg\max_{\vec{x}_{ij}} \nabla \phi_{ij} \qquad \phi_{ij} \in \partial \Omega
\end{equation}
#+name: angle-evaluation
#+begin_src julia :results file :file images/angle.png
using LatexStrings
n = 500
h::Float32 = 1f-4
Δt::Float32 = 1e-4
ε::Float32 = 1e-4
W′(x) = -x * (1 - x^2)
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    @inline r  = Ids[end] - I
    m = maximum(Tuple(Ids[end]))
    if norm(Tuple(r)) < 0.8 * m
        return 1.
        end
    return 0.
end
using LinearAlgebra
include("src/solvers.jl")
include("src/initial_conditions.jl")
@inline function normal_vec(P::CartesianIndex , Ids::CartesianIndices)
    p = [P[1],P[2]]
    n =[128,128]  - p
    return  normalize(n)
end
function grad(field , I::CartesianIndex)
    Ix = CartesianIndex(1,0)
    Iy = CartesianIndex(0,1)
  dx = (field[I + Ix ] - field[I - Ix]) / 2h
  dy = (field[I + Iy ] - field[I - Iy]) / 2h
    return [dx,dy] ./ h
    end
arr = _init()
s = solve(arr , n, θ=-1f-0)

include("src/angle.jl")
out = CUDA.zeros(size(s))
a = calculate_angle(get_backend(s) , 256 , size(s))
bh = border_halo(get_backend(s) , 256 , size(s))
f1 = CUDA.zeros(size(s))
f2 = CUDA.zeros(size(s))
bh(f1, 5)
bh(f2 , 20)
f = f2 .* f1
a(out , s , f )
A = Array(out)
I_min = argmax(A)
heatmap(Array(s)' , aspect_ratio=:equal)
n = normal_vec(I_min , CartesianIndices(s))
g = normalize(grad(Array(s) , I_min))
P = [I_min[1] , I_min[2]]
#acosd((g' * n)/(norm(g) * norm(n)))
scatter!(Tuple(I_min), label=L"P")
quiver!([P[1]] , [P[2]] , quiver=([g[1]] , [g[2]]) .* 50)
quiver!([[P[1]]] , [[P[2]]], quiver= ([n[1]] , [n[2]] ) .* 50)
title!("$(acosd((g' * n))) °")
#+end_src

#+RESULTS:
[[file:images/angle.png]]

#+name: angle-table
#+begin_src julia :results table
using DataFrames
iter = 200
df = DataFrame(theta=Float64[] , angle=Float64[])
for theta=-0.1:0.005:0.1
    arr = _init()
    s = solve(arr , iter, θ=Float32(theta))
    A = Array(out)
    Index = argmax(A)
    n = normal_vec(Index , CartesianIndices(s))
    g = normalize(grad(Array(s) , Index))
    angle = acosd(g' * n)
    push!(df  , (theta , angle))
end
Array(df)
#+end_src

#+caption: value for \theta and corresponding angle \alpha after 200 time-steps
#+attr_latex: :environment longtable
#+RESULTS: angle-table
|   -0.1 |  173.49096591056502 |
| -0.095 |  173.10715739345923 |
|  -0.09 |  172.18364087939332 |
| -0.085 |  171.54740091859054 |
|  -0.08 |   171.3054040677464 |
| -0.075 |   171.1455632002332 |
|  -0.07 |  171.02869693204397 |
| -0.065 |   170.3901810227686 |
|  -0.06 |   170.0449796355949 |
| -0.055 |  173.27274052589075 |
|  -0.05 |   170.3373892767722 |
| -0.045 |  168.11953739721892 |
|  -0.04 |  167.41386769034298 |
| -0.035 |  166.62088559081457 |
|  -0.03 |   164.9014365935728 |
| -0.025 |   162.8061312020723 |
|  -0.02 |  159.92337650959868 |
| -0.015 |  155.82320048245077 |
|  -0.01 |   147.4707481361878 |
| -0.005 |  129.77836444929315 |
|    0.0 |   91.28977210940522 |
|  0.005 |   47.27538237804684 |
|   0.01 |   26.60911004838421 |
|  0.015 |   6.306468865037136 |
|   0.02 |  11.495581754132852 |
|  0.025 |   8.059259459078769 |
|   0.03 |   2.997826637980469 |
|  0.035 |   2.442790881259583 |
|   0.04 |   2.314200756133827 |
|  0.045 |   1.883610279597664 |
|   0.05 |  1.3567468712125557 |
|  0.055 |  0.8024311153759808 |
|   0.06 |  0.5869880299417852 |
|  0.065 |  0.4356076759230446 |
|   0.07 | 0.32719257485287145 |
|  0.075 | 0.03099970458170946 |
|   0.08 | 0.37685133141547533 |
|  0.085 |  0.4151229191583983 |
|   0.09 |  0.7049376111739059 |
|  0.095 |  0.8671639875701463 |
|    0.1 |  1.0282690721714873 |

#+begin_src julia :var data=angle-table
using plots
plot(data)
#+end_src

* Summary and outlook
In this project we examined a numerical model o the CH equation, with simple Neumann boundary conditions. We introduced a simplified version of the solver used in [cite:@Ulmer_CHRelaxed_2024] and derived from [cite:@SHIN20117441]. Which due to GPU acceleration is significantly faster on our available hardware. We have shown a simple Neuman boundary approach that runs stable on both tested domains. The approach introduced by us is able to freely affect the angle of the phase interface on the boundary,

* References
#+PRINT_BIBLIOGRAPHY:

# Local Variables:
# #julia-snail-extensions: (ob-julia)
# #julia-snail/ob-julia-capture-io: nil
# End:


