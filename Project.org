#+title: Analyzing the influence of non-neutral contact angle on the Cahn-Hilliard model
#+startup: latexpreview t
#+latex_class: mimosis
#+BIND: org-latex-title-command ""
#+options: toc:nil
#+BIBLIOGRAPHY: ~/org/resources/bibliography/refs.bib
#+PROPERTY: header-args:julia  :eval never-export :noweb no-export :session *julia* :async t :exports results
#+latex_compiler: lualatex
#+LATEX_HEADER: \usepackage[hyperref,x11names]{xcolor}
# #+latex_header: \include{~/.config/doom/OrgConfig/noteHeader.tex}
#+latex_header: \usepackage[
#+latex_header: colorlinks = true,
#+latex_header: citecolor  = RoyalBlue,
#+latex_header: linkcolor  = RoyalBlue,
#+latex_header: urlcolor   = RoyalBlue,
#+latex_header: unicode
#+latex_header: ]{hyperref}
#+latex_header:\usepackage{fontspec}
#+latex_header:\usepackage{ltablex}
#+latex_header: \usepackage{unicode-math}
#+latex_header: \setmonofont{DejaVu Sans Mono}[Scale=0.8]
#+latex_header: \newenvironment{abstract} {}{}
#+latex_header: \newenvironment{declaration} {}{}
#+latex_header: \usepackage{abstract}
#+latex_header: \usepackage{multicol}
#+latex_header: \usepackage{supertabular,booktabs}
#+latex_header: \DeclareMathOperator*{\argmax}{arg\,\max}
#+latex_header: \usepackage{booktabs}
#+latex_header: \usepackage{multicol}
#+latex_header: \usepackage{siunitx}
#+latex_header: \newenvironment{multicoltable}[1][3]{\begin{multicols}{#1}\begin{supertabular}}{\end{supertabular}\end{multicols}}
#+cite_export: biblatex
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>


#+begin_export latex
\frontmatter
\makeatletter
\begin{titlepage}
    \centering
\includegraphics[width=1\textwidth]{pics/combined.png}
\includegraphics[width=0.19\textwidth]{pics/_simtech.png}
\par
	\vspace{1.5cm}
	{\scshape\huge Project Thesis \par}
	\vspace{1.5cm}
	{\Huge\bfseries  \@title \par}
	\vspace{2cm}
	{\LARGE \@author \par}
	{\Large Matriculation Number: 3545737 \par}
	\vspace{1.5cm}
	{\large Supervisor: Tufan Ghosh\par}
	\vspace{1.5cm}
	{\large Department of Hydromechanics and Modelling of Hydrosystems \par}



	\vfill

% Bottom of the page
	{\large Completed 19.12.2024 \par}
\end{titlepage}
\makeatother

#+end_export

#+begin_abstract
This project examines the effect of a simple Neumann boundary condition on a finite difference solver for the Cahn-Hilliard equation. It presents the results of the proposed method on different domains (for a square and a circule). There it is apparent, that the approach is able to affect the contact angle of the interface on the boundary. Additionally, this project gives a rudimentary technique to calculate this angle.
#+end_abstract
#+begin_declaration
„Hiermit erkläre ich, dass ich die vorliegende Arbeit selbständig verfasst habe, dass ich keine anderen als die angegebenen
Quellen benutzt und alle wörtlich oder sinngemäß aus anderen Werken
übernommenen Aussagen als solche gekennzeichnet habe, dass die
eingereichte Arbeit weder vollständig noch in wesentlichen Teilen Gegenstand
eines anderen Prüfungsverfahrens gewesen ist, dass ich die Arbeit weder
vollständig noch in Teilen bereits veröffentlicht habe und dass das elektronische
Exemplar mit den anderen Exemplaren übereinstimmt.“
#+end_declaration

#+begin_declaration
English translation for convenience:
"I hereby declare that I have written the present work independently, that I
have not used any sources other than those specified and that all statements
taken verbatim or meaningfully from other works have been marked as such,
that the submitted work has not been completely or partially the subject of
another examination procedure, that I have not published the work either
completely or in part, and that the electronic copy coincides exactly with the
other copies."
#+end_declaration

#+TOC: headlines 3
#+begin_export latex
\listoffigures
\mainmatter
#+end_export
* Introduction
This project thesis builds upon the work in our bachelor thesis, by introducing a simple boundary condition approach to a variation of the solver used therein. In Chapter [[Fundamentals]] we introduce the Cahn-Hilliard equation in the formulation that we use for this project. This project used a coupled second order version of this CH equation rather than the usual single 4th order one, to simplify the numerical implementation. The solver itself builds upon a finite difference discretization of this equation. In Chapter [[Numerical Solver]], together with the discrete domains, on which we run our numerical solver, we introduce a Jacobi iteration to solve the linear system derived from the aforementioned discretization.  The numerical solver in this thesis is GPU accelerated, and the discretization we chose to base our solver on is capable to calculate on all domains as long as a characteristic function is given. Therefore, we introduce two domains, on which we present our findings. The primary goal of this work is then the boundary condition approach in Chapter [[Boundary adaptation]]. Conceptionally the boundary condition we introduce simply consists of a constant value added in the linear system to all equations corresponding to grid-cells on the boundary. The actual implementation is capable of doing this for arbitrary domains. We present the results of this method on two Domains, a square one in Chapter [[Numerical evaluation]] and a circular domain in Chapter [[Numerical evaluation on a circle]] where we show the phase field for different boundary conditions which manifest in a variable contact angle of the interface on the boundary mimicking the behavior of hydrophobic/hydrophilic material. While we are unable to provide explicit formulae in relation to contact, in Chapter [[Angle]] we provide numerical insight in this relationship, and a table with precomputed values.
* Fundamentals
This work concerns itself with boundary conditions on the Cahn-Hilliard equation. The Cahn-Hilliard (CH) equation is a fourth order partial differential equation (PDE) used to describe phase separation in binary mixtures. It models how a mixture of two components (e.g., two liquids or alloys) evolves over time to separate into distinct regions with different concentrations of each component. To achive this it provides a phase-field \(\phi\) which is used for an implicit representation of the interface between both phases. The Cahn-Hilliard equation, in the formulation we use here, is derived from the *Ginzburg-Landau* energy \eqref{eq:energy}, an example on how this is done is given by [cite:@Wu_2022].
#+name: eq:energy
\begin{align}
E^{\text{bulk}}[\phi] &= \int_{\Omega} \frac{\varepsilon^2}{2} |\nabla \phi |^2 + W(\phi) \, dx ,
\end{align}
There they introduce a chemical potential \(\mu\) derived as derivative of the *Ginzburg-Landau* energy.
#+name: eq:chemical-potential
\begin{align}
 \mu &= \frac{\delta E_{bulk}(\phi)}{\delta \phi} = -\varepsilon^2 \Delta \phi + W'(\phi),
\end{align}
Where \(W(\phi)\) in the energy, is a double well potential. In our case we orient us at the work of[cite:@SHIN20117441], where they use
\begin{equation}
\label{eq:6}
W(\phi) = \frac{(1-\phi^2)^2}{4}.
\end{equation}
the Cahn-Hilliard equation in this thesis is then given as
\begin{equation}
\begin{aligned}
\partial_{t}\phi(x,t) &=  \Delta\mu \\
\mu &= - \varepsilon^2 \Delta\phi  + W'(\phi).
\end{aligned}
\end{equation}
One thing to note is, that this way of writing the CH equation presents a second order, coupled system, rather than the one dimensional fourth order system \eqref{eq:7} often given.
\begin{equation}
\label{eq:7}
\partial_t \phi(\vec{x} , t) = \Delta(-\varepsilon^2  \Delta \phi + W\prime(\phi))
\end{equation}
This choice is deliberate, and aligns with the numerical implementation.
#+begin_src julia :session *julia* :async t :exports none
pwd()
#+end_src

#+RESULTS:
: /home/proceduraltree/Projects/JuliaGPUTest

** Notation
This project solves the CH equation on a regular rectangular grid with grid-size \(h\). The computational domain, is therefore discretized as
\begin{align}
\label{eq:4}
\vec{x}_{ij} &:= \frac{i}{h} * e_{1} + \frac{j}{h} * e_2,
\end{align}
where \(i,j \in [0 , \dots N]\) and \(N\) is chosen arbitrarily, such that the resulting rectangle \( [0 , Nh] \times [0,Nh]\) acts as bounding box of the domain \(\Omega\). For our implementation we use \(N=256\) as it gives a good compromise between resolution and compute time. We denote a discrete version of the domain \(\Omega_d\) where
\begin{align}
\label{eq:8}
\Omega_d := \{x_{ij} | x_{ij} \in \Omega\}
\end{align}
On this discrete domain our solver calculates solutions for discrete fields
\begin{align}
\label{eq:5}
\phi_{ij}^n &: \Omega_d \times \left\{ 0, \dots  \right\} \to \mathbb{R} \,,\\
\phi_{ij} &:= \phi(\vec{x}_{ij}) & \vec{x}_{ij} \in \Omega_{d} \\
\mu_{ij}^n &: \Omega_d \times \left\{ 0, \dots \right\} \to \mathbb{R} \,, \\
\mu_{ij} &:= \mu(\vec{x}_{ij})
\end{align}
We use the following differential quotients for field \(f_{ij}\):
\begin{align}
D_xf_{i+\frac{1}{2} j} &= \frac{f_{i+1j} - f_{ij}}{h} & D_yf_{ij+\frac{1}{2}} &= \frac{f_{ij+1} - f_{ij}}{h}
\end{align}
And define a discrete gradient as.
\begin{equation}
\nabla_d f_{ij} = (D_x f_{i+1j} , \ D_y f_{ij+1})
\end{equation}
And
\begin{equation}
\Delta_d f_{ij} =  \nabla_{d} \cdot \nabla_d f_{ij}
\end{equation}
See [cite:@Ulmer_CHRelaxed_2024]
Our solver implements the ansatz proposed by the authors [cite:@SHIN20117441].
#+name: eq:ansatz
\begin{equation}
\begin{aligned}
\frac{\phi_{ij}^{n+1} - \phi_{ij}^n}{\Delta t}  &=  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2}} )  \\
 \mu_{ij}^{n+\frac{1}{2}} &= 2\phi_{ij}^{n+1} - \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1} ) + W'(\phi_{ij}^n) - 2\phi _{ij}^n
\end{aligned}
\end{equation}
This approach provides a semi implicit time discretization where linear terms are evaluated implicitly and the nonlinear double well potential is evaluated explicitly.

#+begin_src julia :results file :tangle src/domain.jl :file images/domain.png
using Plots
using LaTeXStrings
pgfplotsx()
Idx = CartesianIndex(1,1)
M = zeros(66,66)
M[2:end-1 , 2:end-1] = ones(64,64)
heatmap(M, title=L"\Omega_d" , clim=(0,1),
            gridlinewidth=2 , axis_equal_image=true , extra_kwargs=:subplot , xlims=(1 ,66) , ylims=(1,66), xlabel=L"x_1",ylabel=L"x_2")
#+end_src

* Boundary adaptation
The solver from [cite:@SHIN20117441], that we use as reference guaranties no flux boundary conditions at a discrete level by setting \( \nabla \phi_{ij} = 0\) for \( \phi_{ij} \in \partial \Omega_{d} \) this is done by multiplying the gradient \( G_{ij} \nabla_d \phi_{ij}\) with the Characteristic function of \( \Omega_{d} \).
\begin{equation}
G_{ij}=
\begin{cases}
1 \,, x_{ij} \in \Omega \\
0 \,, x_{ij} \not\in \Omega \\
\end{cases}
\end{equation}
To accommodate different boundary conditions, we modify \( \nabla_d \cdot (G_{ij} \nabla_d \phi_{ij}) \) with a constant term \(C\) on grid points next to the boundary. To do this, we introduce a boundary field \(B_{ij}\) that we add to \(\mu_{ij}\). We determine the value of \(B_{ij}\) using a central difference scheme on \( G \). We note, that G is implemented as a function, rather than a discrete field.
\begin{equation}
B_{ij} = \max\left(  |G_{i+\frac{1}{2}j} - G_{i-\frac{1}{2}j}| , |G_{ij+\frac{1}{2}} - G_{ij-\frac{1}{2}}|\right) * C
\end{equation}
For example consider a 32x32 domain with \( C=1 \) of the boundary fields \( \mathbf{B} \) for a square domain Figure [[fig:boundary-square]] and an example on a circular domain in Figure [[fig:boundary-circle]].
In this Project we use the following adaptation of the discretization from [cite:@SHIN20117441].
\begin{equation}
\label{eq:second-order-adapted-ansatz}
\begin{aligned}
\frac{\phi_{ij}^{n+1} - \phi_{ij}n}{\Delta t}  &=  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2}} )  \\
 \mu_{ij}^{n+\frac{1}{2}} &= 2\phi_{ij}^{n+1} - \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1} ) + B_{ij} + W'(\phi_{ij}^n) - 2\phi _{ij}^n
\end{aligned}
\end{equation}

#+name: fig:boundary-square
#+begin_src julia :results file :file images/boundary.png
using Plots
using LaTeXStrings
using KernelAbstractions
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    Id = oneunit(I)
    if I in 2*(Ids[begin]+Id):2*(Ids[end]-Id)
        return 1
    end
    return 0
    end
include("src/boundary-conditions.jl")
pgfplotsx()
arr = zeros(64,64)
b = border(get_backend(arr) , 128 , size(arr))
b(arr)

heatmap(arr, title=L"\partial\Omega_d" , clim=(0,1),
            gridlinewidth=2 , axis_equal_image=true , extra_kwargs=:subplot , xlims=(1 ,64) , ylims=(1,64), xlabel=L"x_1" , ylabel=L"x_2")
#+end_src

#+caption: Visualization of all grid-cells adjacent to the boundary \(\partial \Omega_{d}\) of a square domain
#+RESULTS: fig:boundary-square
[[file:images/boundary.png]]



#+name: fig:boundary-circle
#+begin_src julia :results file :file images/boundary-circle.png
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    @inline r  = Ids[end] - I
    m = maximum(Tuple(Ids[end]))
    if norm(Tuple(r)) < 0.8 * m
        return 1.
        end
    return 0.
end
using Plots
using LaTeXStrings
using KernelAbstractions
include("src/boundary-conditions.jl")
pgfplotsx()
arr = zeros(64,64)
b = border(get_backend(arr) , 128 , size(arr))
b(arr)

heatmap(arr, title=L"\partial\Omega_d" , clim=(0,1),
            gridlinewidth=2 , axis_equal_image=true , extra_kwargs=:subplot , xlims=(1 ,64) , ylims=(1,64), xlabel=L"x_1" , ylabel=L"x_2")
#+end_src

#+caption: Visualization of all grid-cells adjacent to the boundary \(\partial \Omega_{d}\) of a circular domain
#+RESULTS: fig:boundary-circle
[[file:images/boundary-circle.png]]



* Numerical solver
Contrary to the solver proposed in [cite:@Ulmer_CHRelaxed_2024] we do not use a multi-grid Gauss-Seidel Solver to solve the linear system, instead we use a Jacobi solver, as this will eventually assist in parallelizing the computation.
Similar to [cite:@Ulmer_CHRelaxed_2024] we linearize \eqref{eq:second-order-adapted-ansatz} to
\begin{equation}
\begin{aligned}
\frac{\phi_{ij}^{n+1}}{\Delta t}  -  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2}} ) &= \frac{ \phi_{ij}^n}{\Delta t}  \\
 \mu_{ij}^{n+\frac{1}{2}} - 2\phi_{ij}^{n+1} + \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1} ) &=2\phi _{ij}^n - W'(\phi_{ij}^n)  - B_{ij}
\end{aligned}
\end{equation}
One may note, that after rearranging some terms leads to a linear system with a right-hand side which is exclusively dependent on the previous time step.
We use Jacobi's method to solve the resulting linear system given above, and the corresponding element wise representation of the same is given in the following.

Provided the \( mth \) Jacobi iteration has been computed, the \( m+1th \) iteration is computed by solving
\begin{equation}
\begin{aligned}
\frac{\phi_{ij}^{n+1,m+1}}{\Delta t}  -  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2},m+\frac{1}{2}} ) &= \frac{ \phi_{ij}^{n}}{\Delta t}  \\
 \mu_{ij}^{n+\frac{1}{2},m} - 2\phi_{ij}^{n+1,m} + \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1,m+\frac{1}{2}} ) + B_{ij} &=2\phi _{ij}^n - W'(\phi_{ij}^n)
\end{aligned}
\end{equation}
For \( \phi_{ij}^{n+1,m+1} , \mu_{ij}^{n+\frac{1}{2},m+1} \),
where \( \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2},m+\frac{1}{2}} ) \) and \( \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1,m+\frac{1}{2}} ) \) can be computed as follows. We use the results from the previous Jacoby step, \(m\), for values off the center. e.g.
\begin{equation}
\begin{aligned}
 \nabla _d \cdot (G_{ij} \nabla_d \phi_{ij}^{n+1,m+\frac{1}{2}} )  =&
\frac{1}{h^2}
\sum_{\Delta \in S} G_{ij + \frac{1}{2} \Delta}\phi_{ij + \Delta}^{n+1,m}  -
\left(
\sum_{\Delta \in S}  G_{ij+\frac{1}{2} \Delta}
\right)\phi_{ij}^{n+1,m+1}
\end{aligned}
\end{equation}
where \(S:= \{ (0,1) , (0,-1) , (1,0) , (-1,0)\}\).
Our implementation is done in julia to transmit the solution for each element in parallel on the GPU. In the following we described the complete implementation of the Jacobi's iteration.
#+begin_src julia :eval never :exports code
@kernel function jacoby!(
    Φ,
    M,
    @Const(Ξ),
    @Const(Ψ),
    @Const(h),
    @Const(ε),
    @Const(Δt),
    @Const(iterations)
)
    I   = @index(Global, Cartesian)
    Id  = oneunit(I)
    Ids = CartesianIndices(M)
    Ix = CartesianIndex(1, 0)
    Iy = CartesianIndex(0, 1)
    if I in (Ids[begin]+Id:Ids[end]-Id)
        g = G(2 * I + Ix, Ids) + G(2 * I + Iy, Ids) + G(2 * I - Ix, Ids) + G(2 * I - Iy, Ids)
        a1 = 1/Δt
        a2 = -1* ε^2/h^2 * g  - 2
        b1 = 1/h^2 * g
        b2 = 1
        for _ = 1:iterations

            Σμ = G(2 * I + Ix, Ids) * M[I+Ix] + G(2 * I + Iy, Ids) * M[I+Iy] + G(2 * I - Ix, Ids) * M[I-Ix] + G(2 * I - Iy, Ids) * M[I-Iy]

            Σϕ = G(2 * I + Ix, Ids) * Φ[I+Ix] + G(2 * I + Iy, Ids) * Φ[I+Iy] +G(2 * I - Ix, Ids) * Φ[I-Ix] +G(2 * I - Iy, Ids) * Φ[I-Iy]

            c1 = Ξ[I] + 1/h^2   * Σμ
            c2 = Ψ[I] - ε^2/h^2 * Σϕ

            # stupid matrix solve
            @inline Φ[I] = (c1*b2 - c2*b1) / (a1*b2 - a2*b1)
            @inline M[I] = (a1*c2 - a2*c1) / (a1*b2 - a2*b1)
            #
            @synchronize()
        end

    end
end
#+end_src
* Numerical evaluation
the numerical investigations in this capter and the following are done with the following hyperparameters:
| parameter | \(\varepsilon\) | \(h\)         | \(\Delta t\)  |
|-----------+-----------------+---------------+---------------|
| value     | \(8 * 10^{-5}\) | \(1*10^{-4}\) | \(1*10^{-4}\) |
We set constant values for B_ij on the boundary to begin with our evaluations.
One may note that C = 0 is equivalent to the no-flux condition of the original solver introduced in the Bachelor thesis. Now, as a preliminary verification step we set C = 0 as our first choice.
Consequently, for \( C = 0 \), the interface lies orthogonal on the boundary (see Fig. [[fig:angle0]]), which we expect for a CH solver with no-flux boundary conditions.
For \( B_{ij} \in \{-1,1\} \) we observed behavior connected to hydrophobic / hydrophilic substances on the boundary, where \( B_{ij}=1 \) resulted in the one phase pearling off the boundary, while the other seemed attracted. These certainly leads to the apparent contact angles of 180° and 0° respectively. Using \( B_{ij} = -1 \) results in the opposite behavior.

#+name: fig:angle0
#+begin_src julia  :exports results :results file :file images/baseline.png
using LaTeXStrings
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    Id = oneunit(I)
    if I in 2*(Ids[begin]+Id):2*(Ids[end]-Id)
        return 1
    end
    return 0
    end

Δt::Float32 = 1e-4
W′(x) = -x * (1 - x^2)

include("src/solvers.jl")
include("src/initial_conditions.jl")
arr = _init()
θ = 0
n = 100
solution = solve(arr , n , θ=θ)
gr()
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
title!(L"$\Phi$  after $%$n$ time-steps")
xlabel!(L"i")
ylabel!(L"j")
#+end_src

#+caption: Phase-field \( \phi \) after 100 time-steps with \( C=0 \) emulating no-flux boundary.
#+RESULTS: fig:angle0
[[file:images/baseline.png]]

We show, that our solver is stable for values \(C \neq 0\). In Fig. [[fig:angle1]] we employ a constant value of \(C=1\) and observe the phase corresponding to \(\phi = 1\) puling away from the boundary. The contact angle between phase 1 and the boundary approaches 180° i.e. the interface runs parallel to the boundary.
#+name: fig:angle1
#+begin_src julia  :results file :file images/angle1.png
θ = 1f0
n = 100
solution = solve(arr , n , θ=θ)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
title!(L"$\Phi$  after $%$n$ time-steps")
xlabel!(L"i")
ylabel!(L"j")
#+end_src

#+caption: phase-field   \(\phi\) after 100 time steps with \(C=1\)
#+RESULTS: fig:angle1
[[file:images/angle1.png]]


In Fig. [[fig:angle-1]] we try the reverse situation, and consequently we observe the corresponding behavior. When using a value of \(C=-1\) we observe opposite behavior relative to the case in Fig. [[fig:angle1]]. Where the contact angle on the boundary lies at 0°, the interface runs parallel to the boundary again.
#+name: fig:angle-1
#+begin_src julia :results file :file images/angle-.png
include("src/solvers.jl")
θ = -1f-0
arr = _init()
n = 100
solution = solve(arr , n , θ=θ ,arrtype=cu)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
title!(L"$\Phi$  after $%$n$ time-steps")
xlabel!(L"i")
ylabel!(L"j")
#+end_src

#+caption: phase-field \( \phi \) after 100 time-steps with \( C=-1 \)
#+RESULTS: fig:angle-1
[[file:images/angle-.png]]

The most interesting behavior are noted for values between \((-1,1)\), where we observe the contact angle of the interface at the boundary changes from parallel 0° to parallel 180°.
#+name: fig:angle-multiple
#+begin_src julia :results file :file images/angle-sqrt(2).png
include("src/solvers.jl")
angles = Float32.([-1+sqrt(2)/2, -0.5 , 0.5 , 1-sqrt(2)/2])
arr = _init()
n = 100
plots = []
for a in angles
    solution = solve(arr , n , θ=a)
    h = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
    title!(h,L" C=%$a")
    xlabel!(h,L"i")
    ylabel!(h,L"j")
    push!(plots, h)
end
plot(plots...)
#+end_src

#+caption: phase-field \( \phi \) after 500 time-steps with \(C \in \{-1 + \frac{\sqrt{2}}{2} , -0.5 , 0.5 , 1 - \frac{\sqrt{2}}{2} \}\)
#+RESULTS: fig:angle-multiple
[[file:images/angle-sqrt(2).png]]



* Numerical evaluation on a circle
The original solver presented in [cite:@SHIN20117441] was able to solve the CH equation on arbitrary domains. Since the addition of our boundary function depends solely on the characteristic function of the discrete domain, we are able to use our approach on different domains, by providing a different characteristic function. We present the results of which in this chapter.
To show the behavior of the CH solver in Fig. [[fig:angle0c]], we first employ no-flux boundary conditions on a circular domain. We observe the interface perpendicular on the boundary, as we expect.

#+begin_src julia :exports nil
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    @inline r  = Ids[end] - I
    m = maximum(Tuple(Ids[end]))
    if norm(Tuple(r)) < 0.8 * m
        return 1.
        end
    return 0.
end

h::Float32 = 3f-4
Δt::Float32 = 1e-4
ε::Float32 = 2e-4
W′(x) = -x * (1 - x^2)
#+end_src

#+RESULTS:
: W′ (generic function with 1 method)


#+name: fig:angle0c
#+begin_src julia  :exports results :results file :file images/angle0c.png
include("src/solvers.jl")
include("src/initial_conditions.jl")
arr = _init()
d = domain(get_backend(arr) , 128 , size(arr))
θ = 0
solution = solve(arr , 100 , θ=θ)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
#+end_src

#+caption: \(\phi\) after 100 time steps on a circular domain with no-flux boundary-conditions after 100 time steps on a circular domain with no-flux
#+RESULTS: fig:angle0c
[[file:images/angle0c.png]]



The results we observe in Fig. [[fig:angle1c]] are similar to the results on a square domain in Fig. [[fig:angle1]]. The contact angle is 180° i.e. the interface does not touch the boundary and runs parallel to it.
#+name: fig:angle1c
#+begin_src julia  :exports results :results file :file images/anfle1c.png
θ = 1f0
solution = solve(arr , 100 , θ=θ)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
#+end_src

#+caption: phase-field \( \phi \) after 100 time-steps with \( C=1 \)
#+RESULTS: fig:angle1c
[[file:images/anfle1c.png]]

The results for \(C=-1\) in Fig. [[fig:angle-1c]] on the circular domain, are similar to the results in Fig. [[fig:angle-1]] on the square domain as well, where the interface touches the boundary and runs parallel with a contact angle of 0°.
#+name: fig:angle-1c
#+begin_src julia   :results file :file images/angle-1c.png
include("src/solvers.jl")
θ = -1f-0
arr = _init()
solution = solve(arr , 100 , θ=θ ,arrtype=cu)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
#+end_src

#+caption: Phase-field \( \phi \) after 100 time-steps with \( C=-1 \)
#+RESULTS: fig:angle-1c
[[file:images/angle-1c.png]]

When evaluating intermediate contact angles in Fig. [[fig:angle-multiplec]], the results are similar to the square domain again, however, especially for shallow angles, we observe some artifacts of one phase appearing in places where previously was none. We observe similar behavior on square domains only in the corners, i.e. points where the boundary has high curvature. Note that this effect can be circumvented with different values for \(\varepsilon\) howeverthis has an effect on the boundary angle, that we did not investigate.
#+name: fig:angle-multiplec
#+begin_src julia   :exports results :results file :file images/angle-multiplec.png
using LaTeXStrings
include("src/solvers.jl")
angles = Float32.([-1+sqrt(2)/2, -0.5 , 0.5 , 1-sqrt(2)/2])
arr = _init()
n = 100
plots = []
for a in angles
    solution = solve(arr , n , θ=a)
    h = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
    title!(h,L" C=%$a")
    xlabel!(h,L"i")
    ylabel!(h,L"j")
    push!(plots, h)
end
plot(plots...)
#+end_src

#+caption: Phase-field \( \phi \) after 500 time-steps with \(C \in \{-1 + \frac{\sqrt{2}}{2} , -0.5 , 0.5 , 1 - \frac{\sqrt{2}}{2} \}\) on a circular domain.
#+RESULTS: fig:angle-multiplec
[[file:images/angle-multiplec.png]]



When using random initial phase-fields, the results look the comparable to the square domain, and exhibit the for the CH equation expected behavior, whereas time goes on, the many small parts coalesce into larger parts.
#+name: fig:random-circle
#+begin_src julia   :results file :file images/random-circle.png :exports none
using LaTeXStrings
include("src/solvers.jl")
θ = 0
arr = cu(rand(Float32,256,256)) .* 2 .- 1
d = domain(get_backend(arr) , 256 , size(arr))
d(arr)
solution = solve(arr , 5 , θ=θ)
h1 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=5")
solution = solve(arr , 50 , θ=θ)
h2 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=50")
solution = solve(arr , 500 , θ=θ)
h3 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=500")
solution = solve(arr , 1000 , θ=θ)
h4 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=1000")
plot(h1,h2,h3,h4)
#+end_src

#+caption: random initial data after increasing  number of time-steps.
#+RESULTS: fig:random-circle
[[file:images/random-circle.png]]


* Relaxed :noexport:
#+begin_src julia
using Plots
using LaTeXStrings
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    Id = oneunit(I)
    if I in 2*(Ids[begin]+Id):2*(Ids[end]-Id)
        return 1
    end
    return 0
    end

h::Float32 = 3f-4
Δt::Float32 = 1e-4
ε::Float32 = 5e-4
W′(x) = -x * (1 - x^2)

include("src/relaxed_solver.jl")
include("src/initial_conditions.jl")
arr = _init()
θ = 0
n = 100
solution = solve(arr , n)
gr()
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
title!(L"$\Phi$  after $%$n$ time-steps")
xlabel!(L"i")
ylabel!(L"j")
#+end_src

* Energy and mass behavior :noexport:
The Cahn-Hilliard equation was originally derived from a Ginzburg-Landau Energy [cite:@Wu_2022]. This energy gives a measure of total curvature, and is proven to decrease in time for no-flux boundary condition for no-flux boundary conditions. The energy is given as
\begin{equation}
\label{eq:ginzburg-landau}
E^{\text{bulk}}[\phi] = \int_{\Omega} \frac{\varepsilon^2}{2} |\nabla \phi |^2 + W(\phi) \, dx ,
\end{equation}
#+begin_src julia
h::Float32 = 3f-4
Δt::Float32 = 1e-4
ε::Float32 = 2e-4
W′(x) = -x * (1 - x^2)
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    @inline r  = Ids[end] - I
    m = maximum(Tuple(Ids[end]))
    if norm(Tuple(r)) < 0.8 * m
        return 1.
        end
    return 0.
end
n = 100
include("src/solvers.jl")
include("src/initial_conditions.jl")
include("src/util.jl")
arr = _init()
s,f = solve_and_evaluate(arr , n, bulk_energy ,  θ=0.0f0)
plot(f[50:end] , yaxis=:log)
#+end_src

#+RESULTS:
[[file:/tmp/babel-frcHT2/julia-VNDrnf.png]]

* Angle
We calculate the angle using the folowing hyperparameters
| parameter | \(\varepsilon\) | \(h\)         | \(\Delta t\)  |
|-----------+-----------------+---------------+---------------|
| value     | \(2 * 10^{-5}\) | \(1*10^{-4}\) | \(1*10^{-4}\) |
In previous experiments we noted that the angle of the interface changes with different input parameters. While we do not have a mathematical derivation of this relation, we aim to provide numerical insight in this chapter. We calculate this angle using the gradient of the phase-field \(\nabla \phi_{ij}\) and the normal of our domains' boundary.
\begin{align}
\label{eq:1}
\frac{\nabla_d \phi_{ij} \cdot \mathbf{n}_{ij}}{\|\nabla_{d} \phi_{ij}\|} &= \cos(\theta),& \text{where}\,&\, \phi_{ij} \in \partial\Omega_{d}
\end{align}
For a single point \(\vec{x}_{ij}\) on the interface and near the boundary. Since we need a finite difference to evaluate \eqref{eq:1}, we do not select a point directly on the boundary and since we need a point on the interface, where \(\nabla \phi_{ij}\) is large, we calculate the angle at
\begin{equation}
\label{eq:2}
P_{ij} = arg\max_{\vec{x}_{ij}} \nabla \phi_{ij} \qquad \text{where} \quad \phi_{ij} \in \partial \Omega
\end{equation}
#+name: angle-function
#+begin_src julia :exports none
include("src/angle.jl")
@inline function normal_vec(P::CartesianIndex , Ids::CartesianIndices)
    p = [P[1],P[2]]
    n =[128,128]  - p
    return  normalize(n)
end

function grad(field , I::CartesianIndex)
    Ix = CartesianIndex(1,0)
    Iy = CartesianIndex(0,1)
    dx = (field[I + Ix ] - field[I - Ix]) / 2h
    dy = (field[I + Iy ] - field[I - Iy]) / 2h
    return [dx,dy] ./ h
end

function argmax_gradient(field)
    out = CUDA.zeros(size(field))
    a = calculate_angle(get_backend(s) , 256 , size(field))
    bh = border_halo(get_backend(field) , 256 , size(field))
    f1 = CUDA.zeros(size(field))
    f2 = CUDA.zeros(size(field))
    bh(f1, 5)
    bh(f2 , 20)
    f = f2 .* f1
    a(out , field , f )
    A = Array(out)
    return argmax(A)
    end

function angle(field,point)
    n = normal_vec(point , CartesianIndices(field))
    g = normalize(grad(Array(field) , point))
    return g , n
end
#+end_src

#+RESULTS: angle-function
: angle (generic function with 1 method)

** Circle
The normal of the circular domain in our second example is
\begin{equation}
\label{eq:3}
\mathbf{n}_{ij} := \mathbf{n}(\vec{x}_{ij}) = \frac{\vec{c} - \vec{x}_{ij}}{\| \vec{c} - \vec{x}_{ij}\|}
\end{equation}
Where \(\vec{c}\) is the center of the domain.
In Fig. [[fig:angle-on-circle]] we present the results of a calculated angle, together with the normals and the point it is calculated from.
#+name: fig:angle-on-circle
#+begin_src julia :results file :file images/angle-circle.png
using LaTeXStrings
n = 500
Δt::Float32 = 1e-4
W′(x) = -x * (1 - x^2)
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    @inline r  = Ids[end] - I
    m = maximum(Tuple(Ids[end]))
    if norm(Tuple(r)) < 0.8 * m
        return 1.
        end
    return 0.
end
using LinearAlgebra
include("src/solvers.jl")
include("src/initial_conditions.jl")
h = 1f-4
arr = _init()
s = solve(arr , n, θ=-1f-0 ,  ε = 3e-4 , h=h)
P = argmax_gradient(s)
g,n = angle(s , P)

heatmap(Array(s)' , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(s,1)), widen=1.06)
#acosd((g' * n)/(norm(g) * norm(n)))
scatter!(Tuple(P), label=L"P")
quiver!([P[1]] , [P[2]] , quiver=([g[1]] , [g[2]]) .* 50)
quiver!([[P[1]]] , [[P[2]]], quiver= ([n[1]] , [n[2]] ) .* 50)
title!("$(acosd((g' * n))) °")
#+end_src

#+caption: Plot of the boundary and surface normals on a circular domain
#+RESULTS: fig:angle-on-circle
[[file:images/angle-circle.png]]


The method we use to calculate the interface-boundary angle is not stable under small changes in \(C\) as seen in  Fig. [[fig:angle-table]] this is unsurprising, since the selection criterion for the point, where we calculate the angle is prone to change as the maximum derivative of the phase-field is approximately the same everywhere on the phase-field. To combat this effect, we chose the point to evaluate at once for all iterations. This however only works if the interface doesn't move from the point selected. The results in Fig. [[fig:angle-table]] shows, that the contact angle is related to the value we use for \(C\). Since the other hyperparameters (\varepsilon and \(h\)) may have an effect on the angel as well, we cannot give an exact relation.

#+name: fig:angle-table
#+begin_src julia :results file :file images/angle-values-circle.png
using DataFrames
iter = 200
df = DataFrame(theta=Float64[] , angle=Float64[])
arr = _init()
s = solve(arr , iter, θ=0)
P = argmax_gradient(s)
for theta=-0.5:0.005:0.5
    arr = _init()
    s = solve(arr , iter, θ=Float32(theta),  ε = 3e-4 , h=1f-4)
    g,n = angle(s, P)
    #local point = P
    alpha = acosd(g' * n)
    push!(df  , (theta , alpha))
end
plot(df.theta , df.angle , label=L"\alpha (C)")
xlabel!(L"C")
ylabel!(L"\alpha")
title!(L"Relation between boundary angle and $C$")
#+end_src

#+caption: value for \(C\) and corresponding angle \alpha after 200 time-steps
#+RESULTS: fig:angle-table
[[file:images/angle-values-circle.png]]


** Square
The normal vector on a square domain is a little bit more complicated than the normal for the circle. In this case we use the normal
\begin{equation}
\label{eq:9}
\mathbf{n}_{ij} = \mathbf{n}(\vec{x}_{ij}) = \max(\vec{c} - \vec{x}_{ij}) e_{\argmax_{i,j}(\vec{c} - \vec{x}_{ij})}
\end{equation}
The angle on a square domain is presented in Fig. [[fig:angle-on-square]]
#+name: fig:angle-on-square
#+begin_src julia :results file :file images/angle-square.png
@inline function normal_vec(P::CartesianIndex , Ids::CartesianIndices)
    p = [P[1],P[2]]
    n =[128,128]  - p
    amax = argmax(n)
    result = zeros(2)
    result[amax] = sign(n[amax])
    return  normalize(result)
end
using LaTeXStrings
n = 500
Δt::Float32 = 1e-4
h = 2f-4
W′(x) = -x * (1 - x^2)
@inline function G(I::CartesianIndex , Ids::CartesianIndices)::Float32
    Id = oneunit(I)
    if I in 2*(Ids[begin]+Id):2*(Ids[end]-Id)
        return 1
    end
    return 0
    end
using LinearAlgebra
include("src/solvers.jl")
include("src/initial_conditions.jl")
arr = _init()
s = solve(arr , n, θ=-1f-0 ,  ε = 3e-4 , h=1f-4)

P = argmax_gradient(s)
g,n = angle(s, P)

heatmap(Array(s)' , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(s,1)), widen=1.06)
#acosd((g' * n)/(norm(g) * norm(n)))
scatter!(Tuple(P), label=L"P")
quiver!([P[1]] , [P[2]] , quiver=([g[1]] , [g[2]]) .* 50)
quiver!([[P[1]]] , [[P[2]]], quiver= ([n[1]] , [n[2]] ) .* 50)
title!("$(acosd((g' * n))) °")
#+end_src

#+caption: Plot of the boundary and surface normals on a circular domain
#+RESULTS: fig:angle-on-square
[[file:images/angle-square.png]]



The relation between the contact angle and \(C\), as seen in Fig. [[fig:angle-table-square]] is about the same as in the circular domain
#+name: fig:angle-table-square
#+begin_src julia :results file :eval never-export :file images/angle-values-square.png
using DataFrames
iter = 200
df = DataFrame(theta=Float64[] , angle=Float64[])
arr = _init()
s = solve(arr , iter, θ=0f0)
P = argmax_gradient(s)
for theta=-0.5:0.005:0.5
    arr = _init()
    s = solve(arr , iter, θ=Float32(theta),  ε = 3f-4 , h=1f-4)
    g,n = angle(s, P)
    #local point = P
    alpha = acosd(g' * n)
    push!(df  , (theta , alpha))
end
plot(df.theta , df.angle  , label=L"\alpha (C)")
xlabel!(L"C")
ylabel!(L"\alpha")
title!(L"Relation between boundary angle and $C$")
#+end_src

#+caption: value for \theta and corresponding angle \alpha after 200 time-steps
#+RESULTS: fig:angle-table-square
[[file:images/angle-values-square.png]]

* Different step sizes and \varepsilon :noexport:
#+begin_src julia
include("src/solvers.jl")
arr = _init()
d = domain(get_backend(arr) , 256 , size(arr))
d(arr)
eps = 0e-5:1e-5:40e-5
Angles = []
anim = @animate for i=eps
    n = 250
    θ = -5f-1
    arr = _init()
    d(arr)
    solution = solve(arr , n , θ=θ , h=i)
    heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"h=%$i")
    p,n,P = angle(solution)
    push!(Angles, acosd(g' * n))
    end
mp4(anim , "animations/h.mp4" , fps=24)
plot(eps , Angles .% 90)
#+end_src

#+RESULTS:
[[file:/tmp/babel-eNQ4eO/julia-bgvr3g.png]]

#+begin_src julia
include("src/solvers.jl")
θ = -5f-1
n = 100
arr = _init()
d = domain(get_backend(arr) , 256 , size(arr))
d(arr)
Grids = 0e-5:1e-5:40e-5
Angles = []
anim = @animate for i=Grids
    solution = solve(arr , n , θ=θ, ε=i)
    heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"\varepsilon=%$i")
    push!(Angles, acosd(g' * n))
    end
mp4(anim , "animations/epsilon.mp4" , fps=24)
plot(eps , Angles .% 90)
#+end_src

#+RESULTS:
: Plots.AnimatedGif("/home/proceduraltree/Projects/JuliaGPUTest/animations/epsilon.mp4")


#+begin_src julia   :results file :file images/random-circle.png :exports none
using LaTeXStrings
include("src/solvers.jl")
θ = 5f-3
arr = cu(rand(Float32,256,256)) .* 2 .- 1
d = domain(get_backend(arr) , 256 , size(arr))
d(arr)
solution = solve(arr , 5 , θ=θ)
h1 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=5")
solution = solve(arr , 50 , θ=θ)
h2 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=50")
solution = solve(arr , 500 , θ=θ)
h3 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=500")
solution = solve(arr , 5000 , θ=θ)
h4 = heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06 , title=L"n=5000")
plot(h1,h2,h3,h4)
#+end_src
* Summary and outlook
In this project we examined a numerical model of the CH equation, with simple Neumann boundary conditions. We introduced a simplified version of the solver used in [cite:@Ulmer_CHRelaxed_2024] and derived from [cite:@SHIN20117441]. Which due to GPU acceleration is significantly faster on our available hardware. We have shown a simple Neumann boundary approach that runs stable on both tested domains. The approach introduced by us is able to freely affect the angle of the phase interface on the boundary, The results of which we have shown on a circular and square domain. We introduced a rudimentary method to calculate the contact angle programmatically however we acknowledge that the results are unreliable. Further research would require a more consistent approach. One such method may be a filter that averages the angle calculation over more than one point, another should be a consistent selection of the point of interest, as the current approach cannot guaranty that the same (or a similar) point is selected if the input parameters change slightly.

Further research may concern itself, with the following topics. First and foremost, we observed inconsistent behavior when changing the hyperparameters \varepsilon and grid-size \(h\). However, the methods we used for evaluation were inconsistent at best. Due to the aforementioned unpredictability in the angle calculation the resulting data series was erratic and no trends where apparent. Further research would require investigation of those effects on the boundary. Additionally, in our bachelor thesis, which served as preliminary work to this project, we investigated an analytical relaxation. The solver used therein for the relaxed problem is compatible with the boundary approach introduced herein. Initial tests with the solver for the relaxed system where promising, and further research may investigate those results.


#+PRINT_BIBLIOGRAPHY:

# Local Variables:
# #julia-snail-extensions: (ob-julia)
# julia-snail/ob-julia-capture-io: nil
# mode: org
# org-export-allow-bind-keywords: t
# End:
