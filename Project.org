#+title: Project Thesis
# #+latex_class: mimosis
#+BIBLIOGRAPHY: ~/org/resources/bibliography/refs.bib
#+PROPERTY: header-args:julia  :eval never-export :noweb no-export
# #+latex_header: \include{~/.doom.d/OrgConfig/noteHeader.tex}
# #+latex_header: \usepackage[
# #+latex_header: colorlinks = true,
# #+latex_header: citecolor  = RoyalBlue,
# #+latex_header: linkcolor  = RoyalBlue,
# #+latex_header: urlcolor   = RoyalBlue,
# #+latex_header: unicode
# #+latex_header: ]{hyperref}
# #+latex_header: \usepackage[utf8x]{inputenc}
#+options:  toc:1
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>

#+begin_abstract
This work shows sensitivity of boundary conditions for two different finite diffrence approaches to solving the cahn hilliard equation
#+end_abstract

* Fundamentals
The Cahn-Hilliard (CH) equation is a diffuse interface coupling equation used for interpolating between different approach in different formulas. We use it in the following form:
\begin{equation}
\begin{aligned}
\partial_{t}\phi(x,t) &=  \nabla \cdot(M(\phi)\nabla\mu) \\
\mu &= - \varepsilon^2 \Delta\phi  + W'(\phi)
\end{aligned}
\end{equation}
Furthermore our solver implements the ansatz proposed by the autors[cite:@SHIN20117441].
#+name: eq:ansatz
\begin{equation}
\begin{aligned}
\frac{\phi_{ij}^{n+1} - \phi_{ij}^n}{\Delta t}  &=  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2}} )  \\
 \mu_{ij}^{n+\frac{1}{2}} &= 2\phi_{ij}^{n+1} - \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1} ) + W'(\phi_{ij}^n) - 2\phi _{ij}^n
\end{aligned}
\end{equation}
We use the same implementation as in the bachelor thesis[cite:@Ulmer_CHRelaxed_2024]. Therefore we use the same discretizations and notation.

#+begin_src julia :results drawer :tangle src/domain.jl
using Plots
using LaTeXStrings
pgfplotsx()
Idx = CartesianIndex(1,1)
M = zeros(66,66)
M[2:end-1 , 2:end-1] = ones(64,64)
heatmap(M, title=L"\Omega_d" , clim=(0,1),
            gridlinewidth=2 , axis_equal_image=true , extra_kwargs=:subplot , xlims=(1 ,66) , ylims=(1,66))
#+end_src

#+RESULTS:
:results:
:end:

** Notation
We use the following differential quotients:
\begin{align}
D_xf_{i+\frac{1}{2} j} &= \frac{f_{i+1j} - f_{ij}}{h} & D_yf_{ij+\frac{1}{2}} &= \frac{f_{ij+1} - f_{ij}}{h}
\end{align}
and define a discrete gradient as.
\begin{equation}
\nabla_d f_{ij} = (D_x f_{i+1j} , \ D_y f_{ij+1})
\end{equation}
see[cite:@Ulmer_CHRelaxed_2024]
* Adaptation to second order Neuman conditions
The solver we use as reference guaranties no flux boundary conditions at a discrete level by setting \( \nabla \phi_{ij} = 0\) for \( \phi_{ij} \in \partial \Omega_{d} \) this is done by multiplying with the Characteristic function of \( \Omega_{d} \)
\begin{equation}
G_{ij}=
\begin{cases}
1 \,, x_{ij} \in \Omega \\
0 \,, x_{ij} \not\in \Omega \\
\end{cases}
\end{equation}
The accommodate different boundary conditions, we bias \( \nabla_d \cdot (G_{ij} \nabla_d \phi_{ij}) \) in grid points next to the boundary. We determine those points using a centred difference scheme on \( G \)
\begin{equation}
B_{ij} = \max\left(  |G_{i+\frac{1}{2}j} - G_{i-\frac{1}{2}j}| , |G_{ij+\frac{1}{2}} - G_{ij-\frac{1}{2}}|\right) * C
\end{equation}
where \( C \) is a constant we chose freely. For example on a 32x32 Domain with \( C=1 \) the Boundary fiels \( \mathbf{B} \) appers as follows
#+begin_src julia :results drawer :async t :results file :file images/Domain.svg
using Plots
using LaTeXStrings
using KernelAbstractions
include("boundary-conditions.jl")
pgfplotsx()
arr = zeros(32,32)
b = BoundaryKernels.border(get_backend(arr) , 128 , size(arr))
b(arr)
heatmap(arr, title=L"\Omega_d" , clim=(0,1),
            gridlinewidth=2 , axis_equal_image=true , extra_kwargs=:subplot  )
#+end_src

#+RESULTS:
:results:
[[file:images/Domain.svg]]
:end:
We then state the adapted approach as:
\begin{equation}
\label{eq:second-order-adapted-ansatz}
\begin{aligned}
\frac{\phi_{ij}^{n+1} - \phi_{ij}^n}{\Delta t}  &=  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2}} )  \\
 \mu_{ij}^{n+\frac{1}{2}} &= 2\phi_{ij}^{n+1} - \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1} ) + B_{ij} + W'(\phi_{ij}^n) - 2\phi _{ij}^n
\end{aligned}
\end{equation}
#+begin_src julia :results raw :async t
include("testbaseline.jl")
solution = solve(arr , 10)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), widen=1.06 , lims=(0,size(solution,1)) )
#+end_src

#+RESULTS:
#+begin_results
[[file:./.ob-julia-snail/jl_OZc5ErUd4d.png]]
#+end_results

* Numerical solver
contrary to the solver proposed in[cite:@Ulmer_CHRelaxed_2024] we do not use a multi-grid Gauss-Seidel Solver to solve the linear system, and use a Jacoby solver instead, since it is easier to parrallize.
Similar to [cite:@Ulmer_CHRelaxed_2024] we linearise \eqref{eq:second-order-adapted-ansatz} to
\begin{equation}
\begin{aligned}
\frac{\phi_{ij}^{n+1}}{\Delta t}  -  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2}} ) &= \frac{ \phi_{ij}^n}{\Delta t}  \\
 \mu_{ij}^{n+\frac{1}{2}} - 2\phi_{ij}^{n+1} + \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1} ) + B_{ij} &=2\phi _{ij}^n - W'(\phi_{ij}^n)
\end{aligned}
\end{equation}
after some rearranging we note, that the left hand side is linear and, the right hand side is solely dependent on the previous time step. Therefore this constitutes a linear system, wich we solve with a Jacoby method, the element wise formula of wich is given as follows:
Provided the \( mth \) Jacoby iteration has been computed, the \( m+1th \) iteration is computed by solving
\begin{equation}
\begin{aligned}
\frac{\phi_{ij}^{n+1,m+1}}{\Delta t}  -  \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2},m+\frac{1}{2}} ) &= \frac{ \phi_{ij}^{n}}{\Delta t}  \\
 \mu_{ij}^{n+\frac{1}{2},m} - 2\phi_{ij}^{n+1,m} + \varepsilon^2  \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1,m+\frac{1}{2}} ) + B_{ij} &=2\phi _{ij}^n - W'(\phi_{ij}^n)
\end{aligned}
\end{equation}
for \( \phi_{ij}^{n+1,m+1} , \mu_{ij}^{n+\frac{1}{2},m+1} \),
where \( \nabla _d \cdot (G_{ij} \nabla_d \mu_{ij}^{n+\frac{1}{2},m+\frac{1}{2}} ) \) and \( \nabla_d \cdot  (G_{ij} \nabla _d \phi_{ij}^{n+1,m+\frac{1}{2}} ) \).  Use the results from the previous jacoby step for values off the center. eg.
\begin{equation}
\begin{aligned}
 \nabla _d \cdot (G_{ij} \nabla_d \phi_{ij}^{n+1,m+\frac{1}{2}} )  =&
\frac{1}{h^2} (
G_{i+\frac{1}{2}j}\phi_{i+1j}^{n+1,m}
+ G_{i-\frac{1}{2}j}\phi_{i-1j}^{n+1,m} \\
& + \quad G_{ij+\frac{1}{2}}\phi_{ij+1}^{n+1,m}
+ G_{ij-\frac{1}{2}}\phi_{ij-1}^{n+1,m}
 ) \\
& -
\left(
 G_{i+\frac{1}{2}j}
 + G_{i-\frac{1}{2}j}
 + G_{ij+\frac{1}{2}}
 + G_{ij-\frac{1}{2}}
\right)\phi_{ij}^{n+1,m+1}
\end{aligned}
\end{equation}
our implementation makes use of julia to dispatch the solution for each element in paralell on the GPU. The full implementation of the jacoby iteration is given as:
#+begin_src julia :eval never :exports code
@kernel function jacoby!(
    Φ,
    M,
    @Const(Ξ),
    @Const(Ψ),
    @Const(h),
    @Const(ε),
    @Const(Δt),
    @Const(iterations)
)
    I   = @index(Global, Cartesian)
    Id  = oneunit(I)
    Ids = CartesianIndices(M)
    Ix = CartesianIndex(1, 0)
    Iy = CartesianIndex(0, 1)
    if I in (Ids[begin]+Id:Ids[end]-Id)
        g = G(2 * I + Ix, Ids) + G(2 * I + Iy, Ids) + G(2 * I - Ix, Ids) + G(2 * I - Iy, Ids)
        a1 = 1/Δt
        a2 = -1* ε^2/h^2 * g  - 2
        b1 = 1/h^2 * g
        b2 = 1
        for _ = 1:iterations

            Σμ = G(2 * I + Ix, Ids) * M[I+Ix] + G(2 * I + Iy, Ids) * M[I+Iy] + G(2 * I - Ix, Ids) * M[I-Ix] + G(2 * I - Iy, Ids) * M[I-Iy]

            Σϕ = G(2 * I + Ix, Ids) * Φ[I+Ix] + G(2 * I + Iy, Ids) * Φ[I+Iy] +G(2 * I - Ix, Ids) * Φ[I-Ix] +G(2 * I - Iy, Ids) * Φ[I-Iy]

            c1 = Ξ[I] + 1/h^2   * Σμ
            c2 = Ψ[I] - ε^2/h^2 * Σϕ

            # stupid matrix solve
            @inline Φ[I] = (c1*b2 - c2*b1) / (a1*b2 - a2*b1)
            @inline M[I] = (a1*c2 - a2*c1) / (a1*b2 - a2*b1)
            #
            @synchronize()
        end

    end
end
#+end_src
* Numerical evaluation
** Experiments
to begin our evaluations we tested constant values for \( B_{ij} \) on the boundary. For \( B_{ij} \in \{-1,1\} \) we observed behaviour expected of hydrophobic / hydrophilic substances on the boundary, where \( B_{ij}=1 \) resulted in the one phase pearling of the boundary, while the other semed attracted. this manifested on apparent contact angles of 180° and 0° respectivly. Using \( B_{ij} = -1 \) results in the opposite behavior.
for \( C = 0 \) the Interface Lies orthogonal on the boundary
#+name: fig:angle0
#+begin_src julia  :exports both :results drawer
include("testbaseline.jl")
θ = 0
solution = solve(arr , 100 , θ=θ)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
#+end_src

#+caption: phase-field \( \phi \) after 100 time-steps with \( C=0 \)
#+RESULTS: fig:angle0
#+begin_results
[[file:./.ob-julia-snail/jl_ojmFmRoZCX.png]]
#+end_results


#+name: fig:angle1
#+begin_src julia  :exports both :results drawer :wrap figure
include("testbaseline.jl")
θ = 1
solution = solve(arr , 100 , θ=θ)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
#+end_src

#+caption: phase-field \( \phi \) after 100 time-steps with \( C=1 \)
#+RESULTS: fig:angle1
#+begin_figure
[[file:./.ob-julia-snail/jl_wjybChKZyZ.png]]
#+end_figure

#+name: fig:angle-1
#+begin_src julia   :results drawer :exports both
include("testbaseline.jl")
θ = -1
solution = solve(arr , 100 , θ=θ)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
#+end_src

#+caption: phase-field \( \phi \) after 100 time-steps with \( C=-1 \)
#+RESULTS: fig:angle-1
#+begin_results
#+end_results

#+name: fig:angle-sqrt(2)
#+begin_src julia   :results drawer :exports both :async t
include("testbaseline.jl")
θ = -sqrt(2)/2
solution = solve(arr , 100 , θ=θ)
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
#+end_src

#+caption: phase-field \( \phi \) after 100 time-steps with \( C=-\frac{\sqrt{2}}{2} \)
#+RESULTS: fig:angle-sqrt(2)
#+begin_results
[[file:./.ob-julia-snail/jl_PAPWzet45y.png]]
#+end_results

#+name: fig:two-blobs
#+begin_src julia   :results drawer :exports both
include("test.jl")
solution = solve(arr , 100  , arrtype=oneArray )
heatmap(Array(solution) , aspect_ratio=:equal , clims=(-1,1), lims=(0,size(solution,1)), widen=1.06)
#+end_src

#+RESULTS: fig:two-blobs
#+begin_results
#+end_results

** more values
further testing shows that with values for \( B_{ij} \in [-1,1] \) we are able to control the contact angle freely.
** Boundary Normals
we are interested in the contact angle of the interface on the boundary. ie.
\begin{align}
\label{eq:1}
\frac{\nabla_d \phi_{ij} \cdot \mathbf{n}}{\|\nabla_{d} \phi_{ij}\|} &= \cos(\theta)& & \phi_{ij} \in \partial\Omega_{d}
\end{align}
We evaluate the boundary at \( x_{2,j} \)



* Summary and outlook
* References
#+PRINT_BIBLIOGRAPHY:

# Local Variables:
# julia-snail-extensions: (ob-julia)
# julia-snail/ob-julia-capture-io: nil
# End:
